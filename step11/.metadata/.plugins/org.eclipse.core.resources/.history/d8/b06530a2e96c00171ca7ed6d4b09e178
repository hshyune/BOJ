import java.io.*;

class Stack {
	private int[] stack;
	private int top;
	private int max;

	public Stack() {
		max = 30;
		stack = new int[max];
		top = -1;
	}

	public void push(int ch) {
		if (top == max - 1) {
			return;
		} else {
			stack[++top] = ch;
		}
	}

	public int pop() {
		if (top == -1)
			return '0';
		else {
			return stack[top--];
		}
	}

	public int top() {
		if (top == -1)
			return '0';
		else {
			return stack[top];
		}
	}

	public int size() {
		return top + 1;
	}

	public int[] getArr() {
		return stack;
	}

}

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(System.in), 1);
			String str = br.readLine();
			Stack s = new Stack();

			for (int i = 0; i < str.length(); i++) {
				int ch = str.charAt(i);
				if (ch == ')') {
					if (s.size() > 0 && s.top() == '(') {
						s.pop();
						if (!isParen(s.top())) {
							System.out.println("top "+s.top());
							int n = s.pop();
							s.push(2 + n);
						} else {
							s.push(2);
						}
						continue;
					}
					if (s.size() > 1) {
						if (!isParen(s.top())) {
							int num = s.pop();
							if (s.top() == '(') {
								s.pop();
								if (!isParen(s.top())) {
									int n = s.pop();
									n = num * 2 + n;
									s.push(n);
								} else {
									s.push(num * 2);
								}
								continue;
							}
						}
					}
				}
				s.push(ch);
			}

			for (int i = 0; i < s.size(); i++) {
				System.out.println(s.getArr()[i]);
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static boolean isParen(int ch) {
		if (ch == '(')
			return true;
		if (ch == ')')
			return true;
		if (ch == '[')
			return true;
		if (ch == ']')
			return true;
		return false;
	}

}
